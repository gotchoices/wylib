#mbar.tcl	0.10	Apr 2001
#Create a frame containing a number of menus/buttons
#------------------------------------------
#Copyright (C) 1999-2001 Wyatt-ERP LLC.  All other rights reserved.
#This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
#This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
package provide wylib 0.10
#TODO:
#X- how to have help for each menu item
#- accumulate helps for menu entries (how to deal with tearoffs/separators)
#- make mentry widget
#- make mbutton (within mbar?)
#- change module name to mbut?
#- global characteristics for menu items, buttons, spent's
#- make widget commands for items, buttons
#- test hierarchical nature (nested widgets)
#- 
#- 

namespace eval mbar {
    namespace export mbar
    variable cfig
    variable v
}

#option add *Mbar.activeBackground darkblue widgetDefault
#option add *Mbar.background CadetBlue widgetDefault
#option add *Mbar.borderWidth 1 widgetDefault
#option add *Mbar.size 3 widgetDefault
#option add *Mbar.relief raised widgetDefault

#Add a button into a menu bar
#------------------------------------------
proc mbar::b_add {w tag args} {
    variable cfig
puts "B_add w:$w tag:$tag args:$args"
}

#Add an item into a menu
#------------------------------------------
proc mbar::mi_add {m tag args} {
    variable cfig
puts "MI_add m:$m tag:$tag args:$args"
    if {$tag == {sep}} {$m add separator; return}
    foreach a {label command help} {
        if {[string range $args 0 0] == {-}} break
        set args [concat [lassign $args val] [list -$a $val]]
    }
    argproc ca(\$s) $args {{help {}} {* {} {lappend ca(native) -$s {$v}}}}
    eval $m add command $ca(native)
    help::init $m "This is the help"
puts "eval $m add command $ca(native)"
}

#Add a sub-menu into a existing menu
#------------------------------------------
proc mbar::sm_add {w tag args} {
    variable cfig
puts "SM_add w:$w tag:$tag args:$args"
}

#Add a menubutton into a menu bar
#------------------------------------------
proc mbar::mb_add {w tag args} {
    variable cfig
puts "MB_add w:$w tag:$tag args:$args"
    if {[string range [set title [lindex $args 0]] 0 0] == {-}} {set title [cap_first $tag]} else {set args [lreplace $args 0 0]}
    set pack {-side left -padx 8}
    argproc ca(\$s) $args {{help {}} {mi {} {lappend mis {$v}}} {sm {} {sm_add \$w $v}} {pack {} {lappend pack $v}} {* {} {lappend ca(native) -$s $v}}}

    eval menubutton [set bn $w.$tag] -text \{$title\} -menu $bn.m -padx 4 $ca(native)
    lappend cfig($w:mbtags) $tag
    set cfig($bn:pack) $pack
    
    menu $bn.m
    foreach mi $mis {eval mi_add $bn.m $mi}	;#add all menu items
#Accumlate helps in a list for the menu    
help::init $bn.m {A dummy help}
    
puts "mis:$mis"
#puts "pack:$pack"
    
#    if {$cfig($bn:s) != {}} {		;#if non-standard frame
#        lappend cfig($bn:gmc) -in [set in $w.b.b$cfig($bn:s)]
#        if {![winfo exists $in]} {lappend cfig($w:bframes) [frame $in]}
#    }

    
#    eval button $bn [native dbe $w $bname]
#    bind $bn <Return> "$bn invoke"
#    if {$cfig($bn:hotkey) != {} && $cfig($bn:hotkey) != {def}} {bind $w $cfig($bn:hotkey) "$bn invoke"}
#    lappend cfig($w:buts) $bn
#    lappend cfig($w:btags) $btag
#    help::init $bn $cfig($bn:help)
}


# Create a menu bar
#------------------------------------------
proc mbar::mbar {w args} {
    variable cfig
    variable v

    frame $w -class Mbar -relief raised -bd 1
    array set cfig "$w:mbtags {}"
    argproc cfig($w:\$s) $args {{help {}} {pack {-side left -padx 10}} {b {} {b_add \$w $v}} {mb {} {mb_add \$w $v}} {native {}} {* {} {lappend cfig(native\$w) -$s $v}}}
    foreach tag $cfig($w:mbtags) {
        eval pack $w.$tag $cfig($w.$tag:pack)
    }
    help::init $w $cfig($w:help)
    rename ::$w __$w
    proc ::$w {command args} "namespace eval mbar widgcmd $w \$command \$args"
}

# Widget command
#------------------------------------------
proc mbar::widgcmd {w command args} {
    switch -exact $command {
        {v}		{return $dbe::v($w:$args)}
        {w}		{return $w}
        {b}		{return [eval b_add $w $args]}
        {mb}		{return [eval mb_add $w $args]}
        {default}	{return [eval __$w $command $args]}
    }
}
