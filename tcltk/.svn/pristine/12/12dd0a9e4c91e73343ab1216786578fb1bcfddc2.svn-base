#dew.tcl	0.10	Jun 2001
#A data entry widget consisting of a frame containing a label and one of:
#entry, text, checkbutton, radiobutton, etc.
#------------------------------------------
#Copyright (C) 1999-2001 Wyatt-ERP LLC.  All other rights reserved.
#This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
#This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
package provide wylib 0.10
#TODO:
#- 

namespace eval dew {
    namespace export dew
    variable cfig
}

option add *Dew.Text.relief sunken widgetDefault
option add *Dew.Text.borderwidth 1 widgetDefault
option add *Dew.Menubutton.relief raised widgetDefault
option add *Dew.Menubutton.anchor w widgetDefault
option add *Dew.Menubutton.padX 1 widgetDefault
option add *Dew.Menubutton.padY 1 widgetDefault
option add *Dew.Menubutton.indicatorOn 1 widgetDefault
option add *Dew.Menubutton.borderWidth 1 widgetDefault
option add *Dew.Entry.width 20 widgetDefault
option add *Dew.Entry.borderWidth 1 widgetDefault
option add *Dew.Label.anchor e widgetDefault

# Perform the special function menu or operation
#------------------------------------------
proc dew::spf {w} {
    variable cfig
    focus $w.e
    set textv [$w.e cget -textv]
    lib::cwatch $w.e
    set uw .dew_spf[translit . _ $w]
    switch $cfig(spf$w) {
        {fsm}	{
            eval scmenu::bindf $uw $en -title \$title $cfig(data$w)
            bindspf $en "lib::cwatch $en; scmenu::launchf %W; lib::cnorm"
            }
        {scm}	{
            regsub -all {%} $cfig(data$w) {%%} cfig(data$w)
            scmenu::top $uw -title {$title} -dest $en $cfig(data$w)
            }
        {clc}	{calc::top $uw -dest $textv -parent $w}
        {edw}	{edwin::edwin $uw -varname $textv -wrap word}
        {edi}	{exedit::exedit $uw \$$textv -dest $textv $cfig(data$w)}
        {tod}	{set $textv [date_today]}
        {cal}	{cal::top $uw $textv -pweeks 3 -title {Select Date:}}
        {dat}	{set $textv [spin::getdate Date: $textv]}
        {mdy}	{set $textv [spin::getmday Date: $textv]}
        {default}	{eval $cfig(spf$w) \$uw \$textv}
    }
    lib::cnorm $w.e
}

# Get configuration for an entry
#------------------------------------------
proc dew::cget {w option} {
    variable cfig
    if {[lcontain {spf data init gmc t f} $option]} {return $cfig($option$w)}
    return [eval _w_$w cget $option]
}

# Configure an existing entry
#------------------------------------------
proc dew::configure {w args} {
    variable cfig
    if {$args == {}} {return [$w configure]}
    foreach s {spf data init} {set cfig($s$w) [xswitch $s args]}
    if {$args != {}} {eval _w_$w configure $args}
    return {}
}

#Create an entry widget
#------------------------------------------
proc dew::dew {w type {title {}} args} {
    variable cfig

    proc bindspf {en sc} {foreach e {<Button-3> <Escape>} {bind $en $e $sc}}    ;#Bind a special function

    array set cfig "gmc$w {pack %t %e -side left}"
    foreach s {gmc} {xswitch $s args cfig($s$w)}
    foreach s {spf data init} {set cfig($s$w) [xswitch $s args]}
    foreach s {t f} {append cfig($s$w) {} [xswitch $s args]}
    eval frame $w -class Dew $cfig(f$w)

    set en $w.e    
    if {$type == {inf}} {set type ent; append cfig(ea) { -relief raised -bd 1}}
    switch $type {			;#make actual field entry
        {ent} {
#puts "entry $en $args"
            eval entry $en $args
            set textv [$en cget -textv]
        }
        {mle} {
            eval text $en $args
            bind $en <Tab> {tkTabToWindow [tk_focusNext %W]; break}
            set textv [$en cget -textv]
        }
        {pdm} {
            set mod {}; xswitch mod args mod
            eval menubutton $en -menu $en.m $args
            set textv [$en cget -textv]
            menu $en.m
            foreach mi $cfig(data$w) {
                lassign $mi mtag mtit
                if {$mtit == {}} {set mlab $mtag} else {set mlab "$mtag - $mtit"}
                $en.m add command -label $mlab -command "set $textv {$mtag}; $mod"
            }
        }
        {chk} {
            set textv {}; xswitch textv.* args textv
            eval checkbutton $en -variable \$textv $args
        }
        {default}   {error "Unknown Dew field type: $type"}
    }
#puts "textv:$textv"
#puts "set $textv $cfig(init$w)"
    if {$textv != {}} {uplevel #0 set $textv $cfig(init$w)}
#FIXME: use the edwin in wentry?
    set uw .dew[translit . _ $w]
    if {$cfig(spf$w) != {}} {
        if {$type != {ent}} {error "-spf switch only allowed with field type ent"}
        switch $cfig(spf$w) {
            {fsm}	{
                eval scmenu::bindf $uw $en -title \$title $cfig(data$w)
                bindspf $en "lib::cwatch $en; scmenu::launchf %W; lib::cnorm"
                }
            {scm}	{
                regsub -all {%} $cfig(data$w) {%%} cfig(data$w)
                bindspf $en "focus $en; lib::cwatch $en; scmenu::top $uw -title {$title} -dest $en $cfig(data$w); lib::cnorm"
                }
            {clc}	{bindspf $en "focus $en; calc::top $uw -dest $textv -parent $w"}
            {edw}	{bindspf $en "focus $en; edwin::edwin $uw -varname $textv -wrap word"}
            {edi}	{bindspf $en "focus $en; exedit::exedit $uw \$$textv -dest $textv $cfig(data$w)"}
            {tod}	{bindspf $en "focus $en; set $textv \[date_today\]"}
            {cal}	{bindspf $en "focus $en; cal::top $uw $textv -pweeks 3 -title {Select Date:}"}
            {dat}	{bindspf $en "focus $en; set $textv \[spin::getdate Date: \$$textv\]"}
            {mdy}	{bindspf $en "focus $en; set $textv \[spin::getmday Date: \$$textv\]"}
            {default}	{bindspf $en $cfig(spf$w)}
        }
    }
    eval label $w.t -text \$title $cfig(t$w)		;#field title

    regsub -all %t $cfig(gmc$w) $w.t gmc
    regsub -all %e $gmc $w.e gmc
    eval $gmc				;#pack,place,grid, etc.

    rename ::$w _w_$w
    proc ::$w {command args} "eval dew::widgcmd $w \$command \$args"
    return $w
}

# Widget command
#------------------------------------------
proc dew::widgcmd {w command args} {
    switch -exact $command {
        {t}		{return [eval $w.t $args]}
        {e}		{return [eval $w.e $args]}
        {w}		{return $w}
        {cget}		{return [eval cget $w $args]}
        {configure}	{return [eval configure $w $args]}
        {default}	{return [eval _w_$w $command $args]}
    }
}
