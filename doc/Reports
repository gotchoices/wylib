Design Concepts for Report Module

Some Examples of Reports to Generate:
- Financial Reports (Balance Sheet, Income Statement, Trial Balance)
  This category is limited to tabular data.  Such reports would derive their
  information from a database view which produces the exact data, given 
  solely the parameters available to modify the report.  In other words, there
  is not much processing required on the data required in the GUI--mostly just 
  presentation.
  
  This could even include the generation of one or more summary rows if the 
  object being queried is a function that can be reasonably instructed 
  on how to generate the data.  Summary rows could be marked as such in a
  column so they could be filtered out if/when necessary.
  
  Using this approach, all tabular reports could easily be exported to a
  spreadsheet using a standard export function built into the dbp.  Then, if
  we want to display it natively, our report component can contain a tabular
  subcomponent that can render the information happily in HTML when that is 
  wanted.
  
- Financial Analysis (Charts, Graphs, Dashboard)
  This would likely contain a header or title explaining what is being
  presented.  Then it would contain one or more embedded objects, presumably
  in a graphics format such as gif, jpg, svg, etc.  Each embedded object
  would likely have its own labeling above, below, or both.

- MyCHIPs Transaction Hardcopy (Ticket, Tally, Check)
  This has a simple header indicating the transaction type and a summary of 
  the information in the transaction (like totals, recipient, etc.).  Most 
  importantly, it includes a QR code which contains the exact data for the 
  transaction.

- MyCHIPs Contract Document
  This is much like a transaction document, in that it contains one or more QR 
  codes as needed to contain the entire document.  However, it must also 
  render much like a legal document.  This means it will contain referenceable 
  sections, subsections and paragraphs. A contract document will contain a 
  checksum, in order to ensure that it is the desired contract and version.  
  So no document can contain any content that cannot reliably be consumed by a 
  hashing function.
  
- Directories
  This could be an employee directory with pictures, a collection of pictures
  of a product or the like.

Format:
Most report generation will be done with Vue in order to make things simpler 
and to facilitate live updating.  However, there should also be an option for
displaying a raw HTML page, or other media such as PDF, which may be created
entirely in the backend, and is merely fetched from an express-driven URL 
provided by the control layer.

Reports will typically be generated inside a wylib-win.  This would make it
pretty easy to generate a control dashboard with multiple report views open on 
a single tab or page.  However if the shift key is held down while launching
the report, it will open instead in a separate popup window.

In either case, the report is in its own document (window or iframe) so it
can be printed by regular means supplied by the browser.

Approach:
Implement reports within the context of general control-layer actions, which 
fall into the following categories:

  - No UI
    The action is invoked but nothing new is generated in the UI.  The control 
    layer should send a status reply indicating if the action was successful.
    This way an error or confirmation message can be generated if necessary.  
    Otherwise, the user can assume the action has been taken.
  
  - Direct UI Report
    A report window is opened immediately and populated with content according 
    to the report type and nature.  Some reports may simply be static.
    However any reports should also be able to send further commands back to
    the control layer.  One example would be following a hyperlink in the
    report.  This should be able to trigger other defined actions as though
    they had been invoked normally.  An interactive report should also be
    capable of initiating regular table/view inserts, updates and so forth.
    
    The data dictionary indicate to the UI, by the presence of a format key,
    that a report window should be generated, and of what variety.
  
  - Polled UI Report
    In this case, the immediate purpose is to collect further data from the
    user before generating a report.  Typically a set of data inputs will be 
    displayed, as specified by the options key in the data dictionary, along 
    with three buttons: Cancel, Apply, OK.  Once the options have been 
    collected, they are sent to the control layer report generator, and the 
    ultimate objective is now completed.
    
    This ultimate objective may be a no-UI action, or another Direct UI Report.
    In either case, the dialog buttons behave as follows:
    
    - Apply: Perform the action each time the button is pressed.  Keep the 
      initial dialog open.  In the case of a report, this should regenerate the 
      report contents each time.
    - OK: Perform the action and then close the dialog (but not the report).
    - Cancel: do not perform the action, or open a report.  In fact, if any
      existing reports are open, associated with this dialog, close them.
